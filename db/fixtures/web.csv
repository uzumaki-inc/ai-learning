chapter,topic_title,topic_question,model_answer
"Web API設計","HTTPの基本","HTTPメソッドのGET、POST、PUT、DELETEの違いを説明してください。","HTTPメソッドの主な特徴：
- GET：リソースの取得。パラメータはURLに表示され、べき等（同じ操作を繰り返しても結果が変わらない）
- POST：新しいリソースの作成。データはリクエストボディに含まれ、副作用がある
- PUT：既存のリソースの完全な更新。クライアントが指定したリソース全体を置き換える
- DELETE：特定のリソースの削除。リソースを完全に除去する操作"
"データベース","データベース接続","データベース接続プールの目的と利点を説明してください。","データベース接続プールとは：
- 事前に複数のデータベース接続を作成し、再利用するための仕組み
- 新規接続の作成コストを削減
- 同時接続数を効率的に管理
- アプリケーションのパフォーマンスと応答性を向上
- リソースの無駄を防ぎ、システムの負荷を軽減"
"セキュリティ","パスワード管理","安全なパスワード保存方法について説明してください。","安全なパスワード保存の重要なポイント：
- ハッシュ関数（bcrypt、Argon2）を使用
- ソルト（ランダムな文字列）を追加
- ハッシュ化の際に計算コストを高く設定
- パスワードを平文で保存しない
- 定期的なセキュリティ更新"
"プログラミング","非同期処理","JavaScriptの非同期処理におけるPromiseとasync/awaitの違いを説明してください。","Promiseとasync/awaitの比較：
- Promiseは非同期処理を表すオブジェクト
- async/awaitはPromiseをより読みやすく書くための構文
- async関数は必ずPromiseを返す
- awaitはPromiseの結果を待ち、同期的なコードのように見せる
- エラーハンドリングが容易になる"
"ネットワーク","通信プロトコル","TCPとUDPの主な違いを説明してください。","TCP（伝送制御プロトコル）：
- 信頼性の高い通信
- パケットの順序を保証
- 再送信と確認応答
- 接続指向
- オーバーヘッドが大きい

UDP（ユーザーデータグラムプロトコル）：
- 高速だが信頼性が低い
- パケット損失の可能性あり
- 順序の保証なし
- 接続不要
- リアルタイム通信に適している"
